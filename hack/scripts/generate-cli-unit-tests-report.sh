#!/bin/bash

# Copyright 2023 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

#####################################################################
# Script Name: generate-cli-unit-tests-report.sh
# Description: This script takes go test reports generated by go-junit-report tool per package and the ginkgo 
#     test summary and code coverage generated by generate-cli-ginkgo-tests-summary.sh per package
#     Generated the final unit tests report per package
# Created Date: 2023-07-21
#####################################################################

# Usage: generate-cli-unit-tests-report.sh CLI-junit-report.xml CLI-ginkgo-tests-summary.txt

# Dependencies: None

# this script is the combine the results of junit_report_xml and ginkgo_tests_summary_with_codecoverage
# and prepare final test report and code coverage per package in Tanzu CLI core

# junit_report_xml is the output of the "make test | go-junit-report"
# it has the each package report, but it treats all ginkgo tests in a package as single test case
# it also it does not capture the code coverage info
junit_report_xml=$(cat $1)

# ginkgo_tests_summary_with_codecoverage is the output of the "make test | go tool test2json | process-unit-test-results.sh"
# ginkgo_tests_summary_with_codecoverage has only the ginkgo test cases report and code coverage info (but not the unit tests report, which we get from junit_report_xml)
# "make test | go tool test2json" has the unit tests and ginkgo tests details
# "process-unit-test-results.sh" captures the ginkgo tests results per package, and also code coverage per package
ginkgo_tests_summary_with_codecoverage=$(cat $2)

# Print the table header
echo "| :memo: Package Path | Total Tests | Passed | Failed | Coverage"
echo "| --- | ---: | ---: | ---: | ---: | ---: | ---: | ---: |"

# Extract test count, failures count, and name for each testsuite using sed
testsuites=$(echo "$junit_report_xml" | sed -n 's/.*<testsuite tests="\([^"]*\)" failures="\([^"]*\)" .*name="\([^"]*\)".*/\1 \2 \3/p')

# Process each testsuite, tests_count is total test cases, failures_count number of failed test cases
# name is the full package path
while read -r tests_count failures_count name; do
    passed=0
    failed=0
    pending=0
    coveragePercentage=""
    
    # Fetch ginkgo test cases details, and code coverage 
    package="$name"
    # package name for ginkgo summary
    ginkgoSuite="ginkgo-suite: package:$package"
    # package name for code coverage summary
    coverageInfo="converageInfo: package:$package"
    while IFS= read -r line; do
      # Check if the given package path $ginkgoSuite exists 
      if [[ "$line" == "$ginkgoSuite,"* ]]; then
          # Extract the test results (Passed, Failed, Pending) from the line
          passed=$(echo "$line" | grep -oE "Passed: [0-9]+" | cut -d ' ' -f 2)
          failed=$(echo "$line" | grep -oE "Failed: [0-9]+" | cut -d ' ' -f 2)
          pending=$(echo "$line" | grep -oE "Pending: [0-9]+" | cut -d ' ' -f 2)
      fi
      # Check if the given package path $coverageInfo exists 
      if [[ "$line" == "$coverageInfo,"* ]]; then
          coverage_val=$(echo "$line" | grep -oE "coverage:[0-9.]+%" | cut -d ':' -f 2)
          if [ -n "$coverage_val" ]; then
              coveragePercentage=$coverage_val
          fi
          break
      fi
    done <<< "$ginkgo_tests_summary_with_codecoverage"

    # if the $passed exists means, there is ginkgo tests for current $package
    # all ginkgo tests ($passed+$failed) treated as single tests in $tests_count
    # calculate actual number of tests
    if [ "$passed" -ne 0 ]; then
      tests_count=$((tests_count - 1 + passed + failed))
    fi
    # all ginkgo failed tests $failed are treated a single failed $failures_count test
    # calculate actual number of failed tests
    if [  "$failed" -ne 0 ]; then
      failures_count=$((failures_count - 1 + failed))
    fi

    
    total_passed=$((tests_count - failures_count))
    row=""
    if [ "$failures_count"  -ne 0 ]; then
      row+="| "$package" | $tests_count | $total_passed | :x: $failures_count "
    else
      row+="| "$package" | $tests_count | $total_passed |  $failures_count "
    fi
    if [ -n "$coveragePercentage" ]; then
      row+="| $coveragePercentage"
    else
      row+="| "NA""
    fi
    echo $row
done <<< "$testsuites"


